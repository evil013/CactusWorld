package views{	import com.dayvid.mvc.composite_view.ComponentView;	import com.dayvid.mvc.composite_view.CompositeView;	import com.dayvid.mvc.controller.TransitionTypes;	import flash.events.Event;	import flash.events.MouseEvent;	public class MainView extends CompositeView	{		private var naviView:NaviView;		private var naviPlayView:NaviPlayView;		private var naviHTPView:NaviHTPView;		private var naviAboutView:NaviAboutView;		private var naviLoginView:NaviLoginView;						public function MainView()		{			trace("[MainView]");			super();			_transitionOnType = TransitionTypes.FADE_IN;			_transitionOffType = TransitionTypes.FADE_OUT;		}		/********************************************************************************************************************************		 * Init and Intro Methods - Inherited methods		 ********************************************************************************************************************************/		override protected function initInternal():void		{			// call super.initInternal(); after setting up this view			//***********			openNaviView();			super.initInternal();					}		override protected function intro():void		{			controller.viewTransition(this, introTransitionComplete, _transitionOnType);		}		override protected function introTransitionComplete():void		{			// if using an intro, set event listeners here.  And anything else relevant.			super.introTransitionComplete();		}		override public function enable():void		{			// this method is intended to be called after the disable method is called			// add events, or anything else to enable this view.			quit_btn.addEventListener(MouseEvent.MOUSE_UP, quitBtnUp);			super.enable();					}		/********************************************************************************************************************************		 * Concrete methods unique to this view		 ********************************************************************************************************************************/		private function quitBtnUp(event:MouseEvent):void		{			this.parentView.closeAView(this, true);		}		private function openNaviView():void		{			naviView = new NaviView();			setupAView(naviView);		}		private function closeNaviView():void		{			naviView.dispose();			naviView = null;		}		private function openNaviPlayView():void		{			if (naviPlayView == null)			{				naviPlayView = new NaviPlayView();				setupAView(naviPlayView);			}		}		private function closeNaviPlayView():void		{			if (naviPlayView != null)			{				naviPlayView.dispose();				naviPlayView = null;			}		}		private function openNaviHTPView():void		{			if (naviHTPView == null)			{				naviHTPView = new NaviHTPView();				setupAView(naviHTPView);			}		}		private function closeNaviHTPView():void		{			if (naviHTPView != null)			{				naviHTPView.dispose();				naviHTPView = null;			}		}		private function openNaviAboutView():void		{			if (naviAboutView == null)			{				naviAboutView = new NaviAboutView();				setupAView(naviAboutView);			}		}		private function closeNaviAboutView():void		{			if (naviAboutView != null)			{				naviAboutView.dispose();				naviAboutView = null;			}		}		private function openNaviLoginView():void		{			if (naviLoginView == null)			{				naviLoginView = new NaviLoginView();				setupAView(naviLoginView);			}		}		private function closeNaviLoginView():void		{			if (naviLoginView != null)			{				naviLoginView.dispose();				naviLoginView = null;			}		}				//********		private function closeCurrentViews():void		{			//trace("clean")			closeNaviPlayView();			closeNaviHTPView();			closeNaviAboutView();			closeNaviLoginView();		}		//*********		/********************************************************************************************************************************		 * Setting up Child Views - Inherited methods		 ********************************************************************************************************************************/		override protected function setupAView(aView:ComponentView):void		{			super.setupAView(aView);			addChild(aView);			aView.init(model, controller, targetStage_mc, this);		}		//*********		/********************************************************************************************************************************		 * Methods inherited from the super class and part of the MVC View interface		 ********************************************************************************************************************************/		override public function perform(task:String, view:ComponentView, object:Object = null):Object		{			if (task == "NaviPlay")			{				// do something				trace("[NaviView] perform NaviPlay");				if (naviPlayView != null)				{					closeNaviPlayView();				}				else				{					openNaviPlayView();				}			}			else if (task == "NaviHTP")			{				// do something				trace("[NaviView] perform NaviHTP");				openNaviHTPView();			}			else if (task == "NaviAbout")			{				// do something				trace("[NaviView] perform NaviAbout");				openNaviAboutView();			}			else if (task == "login")			{				closeCurrentViews();				openNaviLoginView();			}			else if (task == "closelogin")			{				// do something				closeNaviLoginView();				openNaviPlayView();			}			else if (task == "close")			{				// do something				closeCurrentViews();			}			else if (task == "startSelect")			{				// do something				closeCurrentViews();				this.parentView.closeAView(this, false)			}			else			{				closeCurrentViews();				super.perform(task, view, object);			}						// send an Object by default, use this to return anything to the caller			return new Object();		}		//*********		override public function closeAView(view:ComponentView, next:Boolean = true):void		{			/*if (view == viewComponent)			{			closeViewComponent();			}			else			{*/			super.closeAView(view, next);			//}		}		//*********		override public function modelUpdate(event:Event):void		{			// get data from model and update view			//trace ("MainView model update");			//trace("model.whatUpdated: " + model.whatUpdated);		}		/********************************************************************************************************************************		 * Clean up and Outros - Inherited methods		 ********************************************************************************************************************************/		override public function disable():void		{			super.disable();		}		override protected function removeEvents():void		{			quit_btn.removeEventListener(MouseEvent.MOUSE_UP, quitBtnUp);		}		override protected function outro():void		{			controller.viewTransition(this, outroTransitionComplete, _transitionOffType);		}		override protected function outroTransitionComplete():void		{			super.outroTransitionComplete();		}		override protected function cleanUp():void		{			// remove display objects			// clear arrays, objects and vectors			super.cleanUp();		}		override public function dispose():void		{			//trace("cleanUp MainView");			// clean up anything that needs to be cleaned up at the point of calling cleanUp.  Ex: states in the model.			super.dispose();		}	}}