package {	import flash.display.MovieClip;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.events.Event;	import flash.events.KeyboardEvent;		import MainTimer;	public class DocumentMain extends MovieClip	{		//initial variables		private var e:int = 0;		private var minute:int = 0;		private var second:int = 5;		private var gameTimer:MainTimer;		private var childrenOnStage:int;		private var lastX:int;// variable to determine where the last x of the player was.		private var thePlayer:Player;		private var theEnemy:Enemy;		private var doesTheWorldNeedToScroll:Boolean;				public function init()		{					}				public function DocumentMain()		{			trace("document main initiated");			stage.removeEventListener (KeyboardEvent.KEY_DOWN, init);			// constructor code			trace("Start Play");						//Set up the timer			gameTimer = new MainTimer(minute,second);			addChild( gameTimer );			gameTimer.x = 60;			gameTimer.y = 40;			//Set up the player			thePlayer = new Player();			addChild(thePlayer);			thePlayer.x = stage.stageWidth * 0.5;// halfway across the stage			thePlayer.y = 0;			thePlayer.name = "player";			//where code add enemy			while (e < 2 )			{				createEnemy();				e++;			}			lastX = thePlayer.x;			childrenOnStage = this.numChildren;//make sure you assign this value after adding children						this.addEventListener(Event.ENTER_FRAME, mainGameLoop);						stage.focus = stage;						stage.addEventListener (KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener (KeyboardEvent.KEY_UP, keyUpHandler);		}			private function keyDownHandler(e:KeyboardEvent):void {						switch ( e.keyCode) {								case 37:    //left				thePlayer.moveLeft();				break;				case 39:    //right				thePlayer.moveRight();				break;							}								}		private function keyUpHandler(e:KeyboardEvent):void {						switch ( e.keyCode) {								case 37:    //left				case 39:    //right												thePlayer.standStill();				break;								default: 				//anything							}								}		private function mainGameLoop(event:Event):void		{			gameResets();			processCollisions();			scrollStage();			// ends  mainGameLoop		}		private function createEnemy():void		{			theEnemy = new Enemy();			addChild(theEnemy);			theEnemy.x = (Math.random() * stage.stageWidth) + (stage.stageWidth / 2) ;// anywhere across the stage			theEnemy.y = 0;			theEnemy.name = "enemy";			childrenOnStage = this.numChildren;		}		private function processCollisions():void		{			for (var c:int = 0; c < childrenOnStage; c++)			{				if (getChildAt(c).name == "player" || getChildAt(c).name == "enemy")				{					if (_boundaries.hitTestPoint(getChildAt(c).x,getChildAt(c).y,true))					{//if the boundary collides with the player or enemy						while (  _boundaries.hitTestPoint ( getChildAt(c).x , getChildAt(c).y, true) )						{							BoundaryObject(getChildAt(c)).incrementUpward();							//bump up the object until it isn't hitting the boundary;							if (_boundaries.hitTestPoint(getChildAt(c).x,getChildAt(c).y,true))							{								// do nothing							}							else							{// once it isn't hitting the boundary, do this function for keeping the object on the boundary								BoundaryObject(getChildAt(c)).keepOnBoundary();							}											}					//  ends while (  _boundaries.hitTestPoint ( getChildAt(c).x , getChildAt(c).y, true) ) {;				}// ends if ( _boundaries.hitTestPoint ( getChildAt(c).x , getChildAt(c).y, true) )			}//ends if ( getChildAt(c).name == "player") 		}		//ends processCollisions	}	private function gameResets()	{		if (gameTimer.timerHasStopped == true)		{			resetBoard();		}		// ends  gameResets	}	private function resetBoard():void	{		gameTimer.resetTimer(0, 15);	}	private function scrollStage():void	{		if (thePlayer.x != lastX)		{			doesTheWorldNeedToScroll = true;		}		else if (thePlayer.x == lastX)		{			doesTheWorldNeedToScroll = false;		}		if (doesTheWorldNeedToScroll == true)		{									sky.x += (stage.stageWidth * 0.5) - thePlayer.x * 1.002;						for (var b:int = 0; b < childrenOnStage; b ++)			{				if (getChildAt(b).name == "enemy")				{					getChildAt(b).x +=  (stage.stageWidth * 0.5) - thePlayer.x;				}			}			_boundaries.x +=  (stage.stageWidth * 0.5) - thePlayer.x;		} else {						sky.x -= 0.5;		}		// RUN THIS FOLLOWING LINE LAST		thePlayer.x = stage.stageWidth * 0.5;		lastX = thePlayer.x;	}}}