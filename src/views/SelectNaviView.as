package views{	import com.dayvid.mvc.composite_view.ComponentView;	import com.dayvid.mvc.controller.TransitionTypes;	import flash.events.Event;	import flash.events.MouseEvent;	public class SelectNaviView extends ComponentView	{		public function SelectNaviView()		{			trace("[SelectNaviView]");			super();		}		/********************************************************************************************************************************		 * Init and Intro Methods - Inherited methods		 ********************************************************************************************************************************/		override protected function initInternal():void		{			// call super.initInternal(); after setting up this view			super.initInternal();		}		override protected function intro():void		{			controller.viewTransition(this, introTransitionComplete, _transitionOnType);		}		override protected function introTransitionComplete():void		{			// if using an intro, set event listeners here.  And anything else relevant.			super.introTransitionComplete();		}		override public function enable():void		{			// this method is intended to be called after the disable method is called			// add events, or anything else to enable this view.			c1_btn.addEventListener(MouseEvent.MOUSE_UP, c1BtnUp);			c2_btn.addEventListener(MouseEvent.MOUSE_UP, c2BtnUp);			c3_btn.addEventListener(MouseEvent.MOUSE_UP, c3BtnUp);			c4_btn.addEventListener(MouseEvent.MOUSE_UP, c4BtnUp);			super.enable();		}		/********************************************************************************************************************************		 * Concrete methods unique to this view		 ********************************************************************************************************************************/		// place concrete methods here		private function c1BtnUp(event:MouseEvent):void		{			trace("[SelectNaviView].c1BtnUp");			this.parentView.perform("c1", this);		}		private function c2BtnUp(event:MouseEvent):void		{			trace("[SelectNaviView].c2BtnUp");			this.parentView.perform("c2", this);		}		private function c3BtnUp(event:MouseEvent):void		{			trace("[SelectNaviView].c3BtnUp");			this.parentView.perform("c3", this);		}		private function c4BtnUp(event:MouseEvent):void		{			trace("[SelectNaviView].c4BtnUp");			this.parentView.perform("c4", this);		}		/********************************************************************************************************************************		 * Methods inherited from the super class and part of the MVC View interface		 ********************************************************************************************************************************/		override public function perform(task:String, view:ComponentView, object:Object = null):Object		{			if (task == "sample task")			{				// do something				super.perform(task, view, object);			}			else			{				super.perform(task, view, object);			}			// send an Object by default, use this to return anything to the caller			return new Object();		}		override public function modelUpdate(event:Event):void		{			// get data from model and update view			//trace ("SelectNaviView model update");			//trace("model.whatUpdated: " + model.whatUpdated);		}		/********************************************************************************************************************************		 * Clean up and Outros - Inherited methods		 ********************************************************************************************************************************/		override public function disable():void		{			super.disable();		}		override protected function removeEvents():void		{			// remove events			c1_btn.removeEventListener(MouseEvent.MOUSE_UP, c1BtnUp);			c2_btn.removeEventListener(MouseEvent.MOUSE_UP, c2BtnUp);			c3_btn.removeEventListener(MouseEvent.MOUSE_UP, c3BtnUp);			c4_btn.removeEventListener(MouseEvent.MOUSE_UP, c4BtnUp);		}		override protected function outro():void		{			controller.viewTransition(this, outroTransitionComplete, _transitionOffType);		}		override protected function outroTransitionComplete():void		{			super.outroTransitionComplete();		}		override protected function cleanUp():void		{			// remove display objects			// clear arrays, objects and vectors			super.cleanUp();		}		override public function dispose():void		{			//trace("cleanUp SelectNaviView");			// clean up anything that needs to be cleaned up at the point of calling cleanUp.  Ex: states in the model.			super.dispose();		}	}}