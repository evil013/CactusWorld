package com.dayvid.mvc.composite_view {	import mvc_framework.controller.Controller;	import mvc_framework.model.Model;		import flash.display.DisplayObjectContainer;	import flash.errors.IllegalOperationError;	import flash.events.Event;
	// ABSTRACT CLASS (should be subclassed and not instantiated)	public class CompositeRootView extends CompositeView 	{		public function CompositeRootView() 		{			super ();		}				override public function init(aModel:Model, aController:Controller, aStage:DisplayObjectContainer, aParentView:CompositeView):void 		{			super.init(aModel, aController, aStage, this);			initModel ();		}				// ABSTRACT METHOD (must be overridden in a subclass)		public function addedToStage():void		{			throw new IllegalOperationError("addedToStage method missing");		}				protected function initModel():void 		{			model.targetStage_mc = targetStage_mc;			model.rootView = parentView as CompositeRootView;			// register to recieve changes from model			model.addEventListener(Event.CHANGE, modelUpdate);			model.initFlashVars();		}				// ABSTRACT METHOD (must be overridden in a subclass)		override public function disable():void 		{			throw new IllegalOperationError("disable operation not supported");		}				// ABSTRACT METHOD (must be overridden in a subclass)		override protected function removeEvents():void 		{			throw new IllegalOperationError("removeEvents operation not supported");		}				// ABSTRACT METHOD (must be overridden in a subclass)		override protected function outro():void		{			throw new IllegalOperationError("outro operation not supported");		}				// ABSTRACT METHOD (must be overridden in a subclass)		override protected function cleanUp():void		{			throw new IllegalOperationError("cleanUpInternal operation not supported");		}				// ABSTRACT METHOD (must be overridden in a subclass)		override public function dispose():void 		{			throw new IllegalOperationError("cleanUp operation not supported");		}	}}