package views{	import com.dayvid.mvc.composite_view.ComponentView;	import com.dayvid.mvc.composite_view.CompositeView;	import com.dayvid.mvc.controller.TransitionTypes;		import flash.events.Event;	import flash.events.MouseEvent;		public class AdvMapView extends CompositeView 	{						private var advMap2View:AdvMap2View;				public function AdvMapView()		{			trace("[AdvMapView]");			super();						_transitionOnType = TransitionTypes.FADE_IN;			_transitionOffType = TransitionTypes.FADE_OUT;		}				/********************************************************************************************************************************		 * Init and Intro Methods - Inherited methods		 ********************************************************************************************************************************/		override protected function initInternal():void		{			// call super.initInternal(); after setting up this view			super.initInternal();		}				override protected function intro():void		{			controller.viewTransition(this, introTransitionComplete, _transitionOnType);		}				override protected function introTransitionComplete():void		{			// if using an intro, set event listeners here.  And anything else relevant.						super.introTransitionComplete();		}				override public function enable():void		{			// this method is intended to be called after the disable method is called			// add events, or anything else to enable this view.			back_btn.addEventListener(MouseEvent.MOUSE_UP, backbtnUp);			lv2_btn.addEventListener(MouseEvent.MOUSE_UP, lv2BtnUp);			play_btn.addEventListener(MouseEvent.MOUSE_UP, playBtnUp);			super.enable();		}				/********************************************************************************************************************************		 * Concrete methods unique to this view		 ********************************************************************************************************************************/		// place concrete methods here				private function backbtnUp(event:MouseEvent):void		{			this.parentView.closeAView(this, true)		}				private function lv2BtnUp(event:MouseEvent):void		{			openAdv2MapView();		}				private function playBtnUp(event:MouseEvent):void		{			this.parentView.closeAView(this, false)		}				private function openAdv2MapView():void		{			if (advMap2View == null)			{				advMap2View = new AdvMap2View();				setupAView(advMap2View);			}		}		private function closeAdvMap2View():void		{			if (advMap2View != null)			{				advMap2View.dispose();				advMap2View = null;			}		}		/********************************************************************************************************************************		 * Setting up Child Views - Inherited methods		 ********************************************************************************************************************************/		override protected function setupAView(aView:ComponentView):void		{			super.setupAView(aView);			addChild(aView);			aView.init(model, controller, targetStage_mc, this);		}		//*********		/********************************************************************************************************************************		 * Methods inherited from the super class and part of the MVC View interface		 ********************************************************************************************************************************/		override public function perform(task:String, view:ComponentView, object:Object = null):Object		{			if (task == "nextlv")			{				// do something				closeAdvMap2View();						}			else			{				super.perform(task, view, object);			}						// send an Object by default, use this to return anything to the caller			return new Object();		}				override public function closeAView(view:ComponentView, next:Boolean = true):void		{			if (view == advMap2View && next ==true)			{			    closeAdvMap2View();				this.parentView.closeAView(this, true)			}			else if (view == advMap2View && next ==false)			{			    closeAdvMap2View();				this.parentView.closeAView(this, false)			}			else			{			super.closeAView(view, next);			}		}						override public function modelUpdate(event:Event):void 		{			// get data from model and update view			//trace ("AdvMapView model update");			//trace("model.whatUpdated: " + model.whatUpdated);		}				/********************************************************************************************************************************		 * Clean up and Outros - Inherited methods		 ********************************************************************************************************************************/		override public function disable():void 		{			super.disable();		}				override protected function removeEvents():void 		{			// remove events			back_btn.removeEventListener(MouseEvent.MOUSE_UP, backbtnUp);			lv2_btn.removeEventListener(MouseEvent.MOUSE_UP, lv2BtnUp);			play_btn.removeEventListener(MouseEvent.MOUSE_UP, playBtnUp);		}				override protected function outro():void		{			controller.viewTransition(this, outroTransitionComplete, _transitionOffType);		}				override protected function outroTransitionComplete():void		{			super.outroTransitionComplete();		}				override protected function cleanUp():void		{			// remove display objects			// clear arrays, objects and vectors						super.cleanUp();		}				override public function dispose():void 		{			//trace("cleanUp AdvMapView");			// clean up anything that needs to be cleaned up at the point of calling cleanUp.  Ex: states in the model.						super.dispose();		}	}}