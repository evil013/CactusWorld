package views {		import com.dayvid.mvc.composite_view.ComponentView;	import com.dayvid.mvc.composite_view.CompositeView;		import flash.events.Event;	public class ViewComposite extends CompositeView	{		private var viewComponent:ViewComponent;				public function ViewComposite()		{			trace("[ViewComposite]");			super ();		}				/********************************************************************************************************************************		 * Init and Intro Methods - Inherited methods		 ********************************************************************************************************************************/		override protected function initInternal():void		{			openViewComponent();						// call super.initInternal(); after setting up this view			super.initInternal();		}				override protected function intro():void		{			// To add an intro remove comment below, and then comment out: super.intro();			// controller.viewTransition(this, introTransitionComplete, _transitionOnType);						super.intro();		}				override protected function introTransitionComplete():void		{			// if using an intro, set event listeners here.  And anything else relevant.						super.introTransitionComplete();		}				override public function enable():void		{			// this method is intended to be called after the disable method is called			// add events, or anything else to enable this view.			super.enable();		}				/********************************************************************************************************************************		 * Concrete methods unique to this view		 ********************************************************************************************************************************/		// these are example methods for opening and closing a view		private function openViewComponent():void		{			viewComponent = new ViewComponent();			setupAView(viewComponent);		}		private function closeViewComponent():void		{			viewComponent.dispose();			viewComponent = null;		}				/********************************************************************************************************************************		 * Setting up Child Views - Inherited methods		 ********************************************************************************************************************************/		override protected function setupAView(aView:ComponentView):void 		{			super.setupAView(aView);			addChild(aView);			aView.init(model, controller, targetStage_mc, this);		}				/********************************************************************************************************************************		 * Methods inherited from the super class and part of the MVC View interface		 ********************************************************************************************************************************/		override public function perform(task:String, view:ComponentView, object:Object = null):Object		{			if (task == "sample task")			{				// do something				super.perform(task, view, object);			}			else			{				super.perform(task, view, object);			}						// send an Object by default, use this to return anything to the caller			return new Object();		}				override public function closeAView(view:ComponentView, next:Boolean = true):void		{			if (view == viewComponent)			{				closeViewComponent();			}			else			{				super.closeAView(view, next);			}		}				override public function modelUpdate(event:Event):void		{			// get data from model and update view			//trace ("ViewComposite model update");			//trace("model.whatUpdated: " + model.whatUpdated);						super.modelUpdate(event);		}				/********************************************************************************************************************************		 * Clean up and Outros - Inherited methods		 ********************************************************************************************************************************/		override public function disable():void 		{			super.disable();		}				override protected function removeEvents():void 		{			// remove events		}				override protected function outro():void		{			// To add an outro remove comment below, then comment out: super.outro();			// controller.viewTransition(this, outroTransitionComplete, _transitionOffType);						super.outro();		}				override protected function outroTransitionComplete():void		{			super.outroTransitionComplete();		}				override protected function cleanUp():void		{			// remove display objects			// null views			// clear arrays, objects and vectors						super.cleanUp();		}				override public function dispose():void 		{			//trace("cleanUp ViewComposite");			// clean up anything that needs to be cleaned up at the point of calling cleanUp (can't wait for outro() -> cleanUpInternal() to finish).  Ex: states in the model.						super.dispose();		}	}}