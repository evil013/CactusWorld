package com.dayvid.mvc.sound{	import com.dayvid.mvc.controller.controller_components.SoundControl;	import com.dayvid.mvc.model.model_components.OptionsSettings;	import com.dayvid.mvc.sound.music.MusicPlayer;	import com.dayvid.mvc.sound.soundfx.SoundFXPlayer;		import flash.events.Event;	import flash.utils.getDefinitionByName;
	// Singleton	public class SoundManager	{		private static var instance:SoundManager;		internal static var _soundFXPlayer:SoundFXPlayer;				private var sfxPlayer:SoundFXPlayer;		private var musicFactory:MusicPlayer;		private var model:OptionsSettings;				public function SoundManager(pvt:PrivateClass)		{		}				public static function getInstance():SoundManager		{			if (SoundManager.instance == null)			{				SoundManager.instance = new SoundManager(new PrivateClass());				}			return SoundManager.instance;		}				public static function get soundFXPlayer():SoundFXPlayer		{			return _soundFXPlayer;		}				public function init(aModel:OptionsSettings, aController:SoundControl):void 		{			//trace ("init SoundManager");			model = aModel;			var ClassRef = getDefinitionByName("mvc_framework.embed.EmbedSound") as Class;			var embedSound = new ClassRef();			model.embedSound = embedSound;			musicFactory = new MusicPlayer(model, embedSound);			sfxPlayer = new SoundFXPlayer(model, embedSound);						aController.soundFXPlayer = sfxPlayer;			SoundManager._soundFXPlayer = sfxPlayer;						model.addEventListener(Event.CHANGE, modelUpdate);		}				public function playSFX(aType:uint, vars:Object = null):void		{			////trace("ViewSFX playSFX");			sfxPlayer.playSFX(aType, vars);		}				public function stopSFX(aType:uint):void 		{			sfxPlayer.stopSFX(aType);		}				public function sfxSoundTransform(aType:uint, aVol:Number = 1, aPan:Number = 0, aX:* = null):void 		{			sfxPlayer.setSoundTransform(aType, aVol, aPan, aX);		}				public function clearMainSoundFX():void		{			sfxPlayer.clearMainSoundFX();		}				public function playMusic(aType:uint):void 		{			musicFactory.playMusic(aType);		}				public function stopMusic():void 		{			musicFactory.stopMusic();		}				public function deleteMusic():void		{			musicFactory.deleteMusic();		}				public function setSoundTransform(aVol:Number = 1, aPan:Number = 0, aX:* = null):void 		{			musicFactory.setSoundTransform(aVol, aPan, aX);		}				public function modelUpdate(event:Event):void 		{			// get data from model and update view			//trace ("SoundManager model update");			switch(model.whatUpdated)			{				case "sfxVolume":				case "sfxMute":					sfxPlayer.changeVolume(model.sfxVolume);					break;				case "musicVolume":					musicFactory.setSoundTransform(model.musicVolume);					break;				case "musicMute":					if (model.musicMute) 					{						musicFactory.muteMusic();					} 					else 					{						musicFactory.unMuteMusic();					}					break;			}		}				public function cleanUp():void		{			//trace("SoundManager cleanUp");			if (SoundManager.instance != null)			{				//trace("doing SoundManager cleanUp");				// perform clean up								SoundManager.cleanUpSuper();			}		}		//		internal static function cleanUpSuper():void		{			if (SoundManager.instance != null)			{				SoundManager.instance = null;			}		}	}}// this Private Class is only used to "jam" the param in the singleton constructor.  So only this singleton can instiate itselfclass PrivateClass{	public function PrivateClass()	{	}}