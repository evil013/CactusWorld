package com.dayvid.mvc.controller.controller_components {	import com.dayvid.mvc.composite_view.ComponentView;	import com.greensock.TimelineLite;	import com.greensock.TweenAlign;	import com.greensock.TweenLite;	import com.greensock.easing.*;		import com.dayvid.mvc.controller.TransitionTypes;		import fl.motion.Color;		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.filters.BitmapFilter;	import flash.filters.BitmapFilterQuality;	import flash.filters.GlowFilter;		public class UI extends SoundControl 	{		public function UI()		{			super();		}				public function viewTransition(view:ComponentView, completeFunction:Function = null, type:String = TransitionTypes.NONE, object:Object = null):void		{			if (completeFunction == null) completeFunction == emptyCompleteFunction;						switch (type)			{				case TransitionTypes.NONE:					completeFunction.call(null);					break;				case TransitionTypes.TWEEN_OFF_LEFT:				case TransitionTypes.TWEEN_TOGETHER_OFF_LEFT:				case TransitionTypes.TWEEN_TOGETHER_OFF_LEFT_DEFAULT_EASING:				case TransitionTypes.TWEEN_TOGETHER_OFF_RIGHT_DEFAULT_EASING:				case TransitionTypes.TWEEN_OFF_RIGHT:				case TransitionTypes.TWEEN_TOGETHER_OFF_RIGHT:				case TransitionTypes.FADE_OUT:				case TransitionTypes.FADE_OUT_DEFAULT_EASING:					view.parent.addChild(view);				case TransitionTypes.FADE_IN:				case TransitionTypes.FADE_IN_DEFAULT_EASING:				case TransitionTypes.TWEEN_ON_RIGHT:				case TransitionTypes.TWEEN_ON_RIGHT_DEFAULT_EASING:				case TransitionTypes.TWEEN_TOGETHER_ON_RIGHT:				case TransitionTypes.TWEEN_TOGETHER_ON_RIGHT_DEFAULT_EASING:				case TransitionTypes.TWEEN_TOGETHER_ON_LEFT_DEFAULT_EASING:				case TransitionTypes.TWEEN_ON_LEFT:				case TransitionTypes.TWEEN_TOGETHER_ON_LEFT:					tweenOnOrOff(view, completeFunction, type, object);					break;			}		}				private function emptyCompleteFunction():void		{					}				private function tweenOnOrOff(view:ComponentView, completeFunction:Function, type:String, object:Object = null):void		{			var i:uint;			var index:int;			var a_mc:DisplayObject;			var easing:Function = Back.easeIn;			var tweeningOntoStage:Boolean = true;						var timeLineDelay:Number = .2;			var timeLineStartDelay:Number = 0;						switch (type)			{				case TransitionTypes.TWEEN_ON_RIGHT_DEFAULT_EASING:				case TransitionTypes.FADE_IN_DEFAULT_EASING:				case TransitionTypes.FADE_OUT_DEFAULT_EASING:					easing = Quad.easeOut;					break;				case TransitionTypes.TWEEN_TOGETHER_ON_RIGHT_DEFAULT_EASING:				case TransitionTypes.TWEEN_TOGETHER_ON_LEFT_DEFAULT_EASING:				case TransitionTypes.TWEEN_TOGETHER_OFF_LEFT_DEFAULT_EASING:				case TransitionTypes.TWEEN_TOGETHER_OFF_RIGHT_DEFAULT_EASING:					easing = Quad.easeOut;				case TransitionTypes.TWEEN_TOGETHER_OFF_LEFT:				case TransitionTypes.TWEEN_TOGETHER_ON_RIGHT:				case TransitionTypes.TWEEN_TOGETHER_OFF_RIGHT:				case TransitionTypes.TWEEN_TOGETHER_ON_LEFT:					timeLineDelay = 0;					break;			}						if (object != null)			{				var simpleEaseObjects:Array = object.simpleEaseObjects;				var removeObjects:Array = object.removeObjects;				var fadeObjects:Array = object.fadeObjects;				var leaveObjects:Array = object.leaveObjects;								if (object.delayBetweenEffects != null) timeLineDelay = object.delayBetweenEffects;				if (object.delayStartingTransition != null) timeLineStartDelay = object.delayStartingTransition;			}						var childrenToTween:Vector.<DisplayObject> = new Vector.<DisplayObject>();			for (i = 0; i < view.numChildren; i++)			{				a_mc = view.getChildAt(i);								var pushObject:Boolean = true;								if (removeObjects != null)				{					index = removeObjects.indexOf(a_mc);					if (index > -1) 					{						pushObject = false;						a_mc.visible = false;					}				}								if (leaveObjects != null)				{					index = leaveObjects.indexOf(a_mc);					if (index > -1) 					{						pushObject = false;					}				}								if (pushObject) childrenToTween.push(a_mc);			}						var tweens:Array = new Array();			switch (type)			{				case TransitionTypes.TWEEN_OFF_LEFT:				case TransitionTypes.TWEEN_TOGETHER_OFF_LEFT:				case TransitionTypes.TWEEN_OFF_RIGHT:				case TransitionTypes.TWEEN_TOGETHER_OFF_RIGHT:				case TransitionTypes.TWEEN_TOGETHER_OFF_LEFT_DEFAULT_EASING:				case TransitionTypes.TWEEN_TOGETHER_OFF_RIGHT_DEFAULT_EASING:					// reverse so display objects start tweening from top to bottom, not from bottom to top					childrenToTween.reverse();					tweeningOntoStage = false;					break;			}						if (type != TransitionTypes.FADE_IN && type != TransitionTypes.FADE_OUT && type != TransitionTypes.FADE_IN_DEFAULT_EASING && type != TransitionTypes.FADE_OUT_DEFAULT_EASING)			{				for (i = 0; i < childrenToTween.length; i++)				{					a_mc = childrenToTween[i];										var fade:Boolean = false;					if (fadeObjects != null)					{						index = fadeObjects.indexOf(a_mc);						if (index > -1) fade = true;					}										var newXPos:Number;					if (!fade)					{						switch (type)						{							case TransitionTypes.TWEEN_OFF_LEFT:								newXPos = a_mc.x - (a_mc.width + model.movieWidth);								break;							case TransitionTypes.TWEEN_TOGETHER_OFF_LEFT:							case TransitionTypes.TWEEN_TOGETHER_OFF_LEFT_DEFAULT_EASING:								newXPos = a_mc.x - model.movieWidth;								break;							case TransitionTypes.TWEEN_ON_RIGHT:							case TransitionTypes.TWEEN_ON_RIGHT_DEFAULT_EASING:								newXPos = a_mc.x;								a_mc.x = a_mc.x + a_mc.width + model.movieWidth;								break;							case TransitionTypes.TWEEN_TOGETHER_ON_RIGHT:							case TransitionTypes.TWEEN_TOGETHER_ON_RIGHT_DEFAULT_EASING:								newXPos = a_mc.x;								a_mc.x = a_mc.x + model.movieWidth;								break;							case TransitionTypes.TWEEN_ON_LEFT:								newXPos = a_mc.x;								a_mc.x = a_mc.x - (a_mc.width + model.movieWidth);								break;							case TransitionTypes.TWEEN_TOGETHER_ON_LEFT:							case TransitionTypes.TWEEN_TOGETHER_ON_LEFT_DEFAULT_EASING:								newXPos = a_mc.x;								a_mc.x = a_mc.x - model.movieWidth;								break;							case TransitionTypes.TWEEN_OFF_RIGHT:								newXPos = a_mc.x + (a_mc.width + model.movieWidth);								break;							case TransitionTypes.TWEEN_TOGETHER_OFF_RIGHT:							case TransitionTypes.TWEEN_TOGETHER_OFF_RIGHT_DEFAULT_EASING:								newXPos = a_mc.x + model.movieWidth;								break;						}					}										var simpleEase:Boolean = false;					if (simpleEaseObjects != null)					{						index = simpleEaseObjects.indexOf(a_mc);						if (index > -1) simpleEase = true;					}										if (fade)					{						if (tweeningOntoStage)						{							a_mc.alpha = 0;							tweens.push(new TweenLite(a_mc, 1, {alpha:1, ease:Circ.easeIn}));						}						else						{							tweens.push(new TweenLite(a_mc, 1, {alpha:0, ease:Circ.easeIn}));						}					}					else if (simpleEase)					{						tweens.push(new TweenLite(a_mc, 1, {x:newXPos, ease:Circ.easeIn}));					}					else					{						tweens.push(new TweenLite(a_mc, 1, {x:newXPos, ease:easing}));					}				}								var timeline:TimelineLite = new TimelineLite({onComplete:completeFunction});				timeline.insertMultiple(tweens, timeLineStartDelay, TweenAlign.START, timeLineDelay);			}			else			{				if (type == TransitionTypes.FADE_IN || type == TransitionTypes.FADE_IN_DEFAULT_EASING)				{					view.alpha = 0;					TweenLite.to(view, 1, {alpha:1, ease:easing, onComplete:completeFunction});				}				else if (type == TransitionTypes.FADE_OUT || type == TransitionTypes.FADE_OUT_DEFAULT_EASING)				{					TweenLite.to(view, 1, {alpha:0, ease:easing, onComplete:completeFunction});				}			}		}				public function getBitmapFilterGlow(aColor:Number, aStrenght:Number, aBlur:Number = 11, aInner:Boolean = false):BitmapFilter 		{			var color:Number = aColor;			var blurX:Number = aBlur;			var blurY:Number = aBlur;			var alpha:Number = 1;			var strength:Number = aStrenght;			var inner:Boolean = aInner;			var knockout:Boolean = false;			var quality:Number = BitmapFilterQuality.HIGH;			return new GlowFilter(color, alpha, blurX, blurY, strength, quality, inner, knockout);		}				public function dim(aMC:DisplayObject, dim:Boolean = true):void		{			if (dim)			{				var tintEffect:Color = new Color();				tintEffect.setTint(0x000000, .5);				aMC.transform.colorTransform = tintEffect;			}			else			{				aMC.transform.colorTransform = new Color();			}		}	}}