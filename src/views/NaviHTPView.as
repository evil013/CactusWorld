package views{	import com.dayvid.mvc.composite_view.ComponentView;	import com.dayvid.mvc.composite_view.CompositeView;	import com.dayvid.mvc.controller.TransitionTypes;		import flash.events.Event;	import flash.events.MouseEvent;	public class NaviHTPView extends ComponentView 	{				public function NaviHTPView()		{			trace("[NaviHTPView]");			super();						_transitionOnType = TransitionTypes.FADE_IN;			_transitionOffType = TransitionTypes.FADE_OUT;		}				/********************************************************************************************************************************		 * Init and Intro Methods - Inherited methods		 ********************************************************************************************************************************/		override protected function initInternal():void		{			// call super.initInternal(); after setting up this view			super.initInternal();		}				override protected function intro():void		{			controller.viewTransition(this, introTransitionComplete, _transitionOnType);		}				override protected function introTransitionComplete():void		{			// if using an intro, set event listeners here.  And anything else relevant.						super.introTransitionComplete();		}				override public function enable():void		{			// this method is intended to be called after the disable method is called			// add events, or anything else to enable this view.			backH_btn.addEventListener(MouseEvent.MOUSE_UP, backHBtnUp);			super.enable();		}				/********************************************************************************************************************************		 * Concrete methods unique to this view		 ********************************************************************************************************************************/		// place concrete methods here				private function backHBtnUp(event:MouseEvent):void		{			trace("close HTP")			this.parentView.perform("close", this);					}						/********************************************************************************************************************************		 * Methods inherited from the super class and part of the MVC View interface		 ********************************************************************************************************************************/		override public function perform(task:String, view:ComponentView, object:Object = null):Object		{			if (task == "sample task")			{				// do something				super.perform(task, view, object);			}			else			{				super.perform(task, view, object);			}						// send an Object by default, use this to return anything to the caller			return new Object();		}				override public function modelUpdate(event:Event):void 		{			// get data from model and update view			//trace ("NaviHTPView model update");			//trace("model.whatUpdated: " + model.whatUpdated);		}				/********************************************************************************************************************************		 * Clean up and Outros - Inherited methods		 ********************************************************************************************************************************/		override public function disable():void 		{			super.disable();		}				override protected function removeEvents():void 		{			// remove events			backH_btn.removeEventListener(MouseEvent.MOUSE_UP, backHBtnUp);		}				override protected function outro():void		{			controller.viewTransition(this, outroTransitionComplete, _transitionOffType);		}				override protected function outroTransitionComplete():void		{			super.outroTransitionComplete();		}				override protected function cleanUp():void		{			// remove display objects			// clear arrays, objects and vectors						super.cleanUp();		}				override public function dispose():void 		{			//trace("cleanUp NaviHTPView");			// clean up anything that needs to be cleaned up at the point of calling cleanUp.  Ex: states in the model.						super.dispose();		}	}}