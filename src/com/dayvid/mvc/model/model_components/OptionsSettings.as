package com.dayvid.mvc.model.model_components {	import com.dayvid.mvc.model.ModelEvents;
	
	import mvc_framework.model.ProjectModelEvents;

	public class OptionsSettings extends GameInfo 	{		protected var _showToolTips:Boolean = true;		private var _gamePaused:Boolean = false;		private var _embedSound:Object;		private var _optionsOpen:Boolean = false;		private var optionsObject:Object = new Object();		// music		private var _musicVolume:Number = 1;		private var _musicVolumeMax:Number = _musicVolume;		private var _musicVolumeDefault:Number = _musicVolumeMax		private var _musicMute:Boolean = false;		private var savedMusicVolume:Number = _musicVolume;		// sfx		private var _sfxVolume:Number = 1;		private var _sfxVolumeMax:Number = _sfxVolume;		private var _sfxVolumeDefault:Number = _sfxVolumeMax;		private var _sfxMute:Boolean = false;		private var savedSFXVolume:Number = _sfxVolume;		//		public function OptionsSettings() 		{			//trace("GameControl");			super();		}				public function set optionsOpen(value:Boolean):void		{			gamePaused = value;			_optionsOpen = value;			dispatchUpDate(ModelEvents.OPTIONS);		}		public function get optionsOpen():Boolean		{			return _optionsOpen;		}		public function setOptionsObject(object:Object):void		{			optionsObject = object;		}		public function getOptionsObject():Object		{			return optionsObject;		}				public function toggleShowToolTips():void		{			if (_showToolTips) showToolTips = false else showToolTips = true;						dispatchUpDate(ModelEvents.TOOL_TIPS);		}		public function get showToolTips():Boolean		{			return _showToolTips;		}		public function set showToolTips(aParam:Boolean):void		{			_showToolTips = aParam;			dispatchUpDate(ModelEvents.TOOL_TIPS);		}				public function quitGame():void		{			dispatchUpDate(ModelEvents.QUIT_GAME);		}				public function pauseGame(forcePause:Boolean = false):void 		{			if (gamePaused) 			{				gamePaused = false;			} 			else 			{				gamePaused = true;			}			if (forcePause) 			{				gamePaused = true;			}		}		public function get gamePaused():Boolean 		{			return _gamePaused;		}		public function set gamePaused(aParam:Boolean):void		{			if (aParam != _gamePaused) 			{				_gamePaused = aParam;				dispatchUpDate(ModelEvents.PAUSE_GAME);			}		}				// SOUND		public function get embedSound():Object		{			return _embedSound;		}		public function set embedSound(value:Object):void		{			_embedSound = value;		}				// MUSIC		public function get musicVolume():Number 		{			return _musicVolume;		}		public function set musicVolume(aParam:Number):void 		{			if (aParam > _musicVolumeMax) 			{				_musicVolume = _musicVolumeMax;			} 			else 			{				_musicVolume = aParam;			}						if (_musicVolume > 0 && _musicMute) 			{				_musicMute = false;				dispatchUpDate("musicMute");			}			else if (_musicVolume <= 0 && !_musicMute) 			{				_musicMute = true;				dispatchUpDate("musicMute");			}			else			{				dispatchUpDate("musicVolume");			}		}		public function get musicVolumeMax():Number 		{			return _musicVolumeMax;		}		public function set musicVolumeMax(aParam:Number):void 		{			_musicVolumeMax = aParam;			_musicVolume = aParam;		}		public function set musicVolumeDefault(aParam:Number):void 		{			_musicVolumeDefault = aParam;			_musicVolume = aParam;		}		public function musicMuteToggle():void		{			if (_musicMute)			{				musicMute = false 			}			else 			{				musicMute = true;			}		}		public function set musicMute(aBoolean:Boolean):void 		{			if (aBoolean != _musicMute) 			{				if (aBoolean)				{					savedMusicVolume = _musicVolume;					_musicVolume = 0;				}				else				{					_musicVolume = savedMusicVolume;				}				_musicMute = aBoolean;				if (_musicVolume <= 0 && !_musicMute) 				{					_musicVolume = _musicVolumeDefault;					savedMusicVolume = _musicVolume;				}				dispatchUpDate("musicMute");			}		}		public function get musicMute():Boolean 		{			return _musicMute;		}		// SFX		public function get sfxVolume():Number 		{			return _sfxVolume;		}		public function set sfxVolume(aParam:Number):void 		{			/*_sfxVolume = aParam;			if (_sfxVolume > 0)			{				savedSFXVolume = _sfxVolume;				_sfxMute = false;			}			else			{				_sfxMute = true;			}			dispatchUpDate("sfxVolume");*/			if (aParam > _sfxVolumeMax) 			{				_sfxVolume = _sfxVolumeMax;			} 			else 			{				_sfxVolume = aParam;			}			if (_sfxVolume > 0 && _sfxMute) 			{				_sfxMute = false;				dispatchUpDate("sfxMute");			}			else if (_sfxVolume <= 0 && !_sfxMute) 			{				_sfxMute = true;				dispatchUpDate("sfxMute");			}			else			{				dispatchUpDate("sfxVolume");			}					}		public function set sfxVolumeDefault(aParam:Number):void 		{			_sfxVolumeDefault = aParam;			_sfxVolume = aParam;		}		public function get sfxVolumeDefault():Number		{			return _sfxVolumeDefault;		}		public function sfxToggleMute():void 		{			if (_sfxMute) sfxMute = false else sfxMute = true;		}		public function set sfxMute(aParam:Boolean):void		{			if (!aParam)			{				if (savedSFXVolume <= .1) savedSFXVolume = _sfxVolumeDefault;				_sfxVolume = savedSFXVolume;			}			else			{				savedSFXVolume = _sfxVolume;				_sfxVolume = 0;			}			_sfxMute = aParam;			dispatchUpDate("sfxMute");		}		public function get sfxMute():Boolean		{			return _sfxMute;		}	}}