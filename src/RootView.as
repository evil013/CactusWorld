package {	import com.dayvid.mvc.composite_view.ComponentView;	import com.dayvid.mvc.composite_view.CompositeRootView;	import com.dayvid.mvc.controller.ControllerStatic;	import com.dayvid.mvc.model.ModelEvents;	import com.dayvid.mvc.model.ModelStatic;	import com.dayvid.mvc.sound.SoundManager;		import flash.display.MovieClip;	import flash.events.Event;		import mvc_framework.controller.Controller;	import mvc_framework.model.Model;		import views.IntroView;	import views.MainView;    import views.SelectView;    import views.AdvMapView;    import views.PlayView;		public class RootView extends CompositeRootView 	{		private var introView:IntroView;		private var mainView:MainView;		private var selectView:SelectView;		private var advMapView:AdvMapView;		private var playView:PlayView;				public function RootView(aStage:MovieClip)		{			//trace ("RootView");			super();						var model:Model = new Model(aStage);			ModelStatic.model = model;						var controller:Controller = new Controller(model);			ControllerStatic.controller = controller;						init(model, controller, aStage, this);		}				override protected function initInternal():void		{						modelDefaults();									openIntroView();									super.initInternal();		}				/********************************************************************************************************************************		 * Concrete methods unique to this view		 ********************************************************************************************************************************/		private function modelDefaults():void 		{						model.musicVolumeMax = 1;			model.musicVolume = .6;			model.sfxVolume = 1;			model.gamePaused = false;		}				private function openIntroView():void		{			introView = new IntroView();			setupAView(introView);		}		private function closeIntroView():void		{			introView.dispose();			introView = null;		}						private function openMainView():void		{			mainView = new MainView();			setupAView(mainView);		}		private function closeMainView():void		{			mainView.dispose();			mainView = null;		}				private function openSelectView():void		{			selectView = new SelectView();			setupAView(selectView);		}		private function closeSelectView():void		{			selectView.dispose();			selectView = null;		}				private function openAdvMapView():void		{			if (advMapView == null)			{				advMapView = new AdvMapView();				setupAView(advMapView);			}		}		private function closeAdvMapView():void		{			if (advMapView != null)			{				advMapView.dispose();				advMapView = null;			}		}		private function openPlayView():void		{			playView = new PlayView();			setupAView(playView);		}		private function closePlayView():void		{			playView.dispose();			playView = null;		}/********************************************************************************************************************************		 * Setting up Child Views - Inherited methods		 ********************************************************************************************************************************/		override protected function setupAView(aView:ComponentView):void 		{			super.setupAView(aView);			addChild(aView);			aView.init(model, controller, targetStage_mc, this);		}				/********************************************************************************************************************************		 * Methods inherited from the super class and part of the MVC View interface		 ********************************************************************************************************************************/		override public function perform(task:String, view:ComponentView, object:Object = null):Object		{			if (task == "test")			{				// do something				//closeAdvMapView();			}			else			{				super.perform(task, view, object);			}						// send an Object by default, use this to return anything to the caller			return new Object();		}				override public function closeAView(view:ComponentView, next:Boolean = true):void		{						if (view == introView)			{				openMainView();				closeIntroView();			}			else if (view == mainView && next == true)			{				this.openIntroView();				this.closeMainView();			}			else if (view == mainView && next == false)			{				this.openSelectView();				this.closeMainView();			}			else if (view == selectView && next == true)			{				this.openMainView();				this.closeSelectView();			}			else if (view == selectView && next == false)			{				this.openAdvMapView();				this.closeSelectView();			}			else if (view == advMapView && next == true)			{				this.openSelectView();				this.closeAdvMapView();			}			else if (view == advMapView && next == false)			{				this.openPlayView();				this.closeAdvMapView();			}			else if (view == playView && next == true)			{				this.closePlayView();				this.openAdvMapView();			}			else			{				super.closeAView(view, next);			}		}				override public function modelUpdate(event:Event):void		{			// get data from model and update view			//trace ("RootView model update");			//trace("model.whatUpdated: " + model.whatUpdated);						super.modelUpdate(event);		}	}}