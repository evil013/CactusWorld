package views{	import com.dayvid.mvc.composite_view.ComponentView;	import com.dayvid.mvc.composite_view.CompositeView;	import com.dayvid.mvc.controller.TransitionTypes;	import flash.events.Event;	import flash.events.MouseEvent;	public class SelectView extends CompositeView	{		private var selectNaviView:SelectNaviView;   		private var c1View:C1View;   		private var c2View:C2View;   		private var c3View:C3View;   		private var c4View:C4View;		private var advMapView:AdvMapView;						public function SelectView()		{			trace("[SelectView]");			super();			_transitionOnType = TransitionTypes.FADE_IN;			_transitionOffType = TransitionTypes.FADE_OUT;		}		/********************************************************************************************************************************		 * Init and Intro Methods - Inherited methods		 ********************************************************************************************************************************/		override protected function initInternal():void		{			// call super.initInternal(); after setting up this view			//***********			openSelectNaviView();			super.initInternal();		}		override protected function intro():void		{			controller.viewTransition(this, introTransitionComplete, _transitionOnType);		}		override protected function introTransitionComplete():void		{			// if using an intro, set event listeners here.  And anything else relevant.			super.introTransitionComplete();		}		override public function enable():void		{			// this method is intended to be called after the disable method is called			// add events, or anything else to enable this view.			quitS_btn.addEventListener(MouseEvent.MOUSE_UP, quitSBtnUp);			super.enable();		}		/********************************************************************************************************************************		 * Concrete methods unique to this view		 ********************************************************************************************************************************/		private function quitSBtnUp(event:MouseEvent):void		{			this.parentView.closeAView(this, true);		}		private function openSelectNaviView():void		{			selectNaviView = new SelectNaviView();			setupAView(selectNaviView);		}		private function closeSelectNaviView():void		{			selectNaviView.dispose();			selectNaviView = null;		}		private function openC1View():void		{			if (c1View == null)			{				c1View = new C1View();				setupAView(c1View);			}		}		private function closeC1View():void		{			if (c1View != null)			{				c1View.dispose();				c1View = null;			}		}		private function openC2View():void		{			if (c2View == null)			{				c2View = new C2View();				setupAView(c2View);			}		}		private function closeC2View():void		{			if (c2View != null)			{				c2View.dispose();				c2View = null;			}		}				private function openC3View():void		{			if (c3View == null)			{				c3View = new C3View();				setupAView(c3View);			}		}		private function closeC3View():void		{			if (c3View != null)			{				c3View.dispose();				c3View = null;			}		}		private function openC4View():void		{			if (c4View == null)			{				c4View = new C4View();				setupAView(c4View);			}		}		private function closeC4View():void		{			if (c4View != null)			{				c4View.dispose();				c4View = null;			}		}				//********		private function closeCurrentViews():void		{			trace("clean")			closeC1View();			closeC2View();			closeC3View();			closeC4View();		}		//*********		/********************************************************************************************************************************		 * Setting up Child Views - Inherited methods		 ********************************************************************************************************************************/		override protected function setupAView(aView:ComponentView):void		{			super.setupAView(aView);			addChild(aView);			aView.init(model, controller, targetStage_mc, this);		}		//*********		/********************************************************************************************************************************		 * Methods inherited from the super class and part of the MVC View interface		 ********************************************************************************************************************************/		override public function perform(task:String, view:ComponentView, object:Object = null):Object		{			//closeCurrentViews();			if (task == "close")			{				// do something				closeCurrentViews();			}			else if (task == "c1")			{				// do something				trace("[SelectNaviView] perform C1View");				openC1View();			}			else if (task == "c2")			{				// do something				trace("[SelectNaviView] perform C2View");				openC2View();			}			else if (task == "c3")			{				// do something				trace("[SelectNaviView] perform C3View");				openC3View();			}			else if (task == "c4")			{				// do something				trace("[SelectNaviView] perform C4View");				openC4View();			}			else if (task == "startplay")			{				// do something				trace("[SelectNaviView] perform startplay");				closeCurrentViews();				this.parentView.closeAView(this, false)			}			else			{				super.perform(task, view, object);			}						// send an Object by default, use this to return anything to the caller			return new Object();		}		//*********		override public function closeAView(view:ComponentView, next:Boolean = true):void		{			/*if (view == viewComponent)			{			closeViewComponent();			}			else			{*/			super.closeAView(view, next);			//}		}		//*********		override public function modelUpdate(event:Event):void		{			// get data from model and update view			//trace ("SelectView model update");			//trace("model.whatUpdated: " + model.whatUpdated);		}		/********************************************************************************************************************************		 * Clean up and Outros - Inherited methods		 ********************************************************************************************************************************/		override public function disable():void		{			super.disable();		}		override protected function removeEvents():void		{			quitS_btn.removeEventListener(MouseEvent.MOUSE_UP, quitSBtnUp);		}		override protected function outro():void		{			controller.viewTransition(this, outroTransitionComplete, _transitionOffType);		}		override protected function outroTransitionComplete():void		{			super.outroTransitionComplete();		}		override protected function cleanUp():void		{			// remove display objects			// clear arrays, objects and vectors			super.cleanUp();		}		override public function dispose():void		{			//trace("cleanUp SelectView");			// clean up anything that needs to be cleaned up at the point of calling cleanUp.  Ex: states in the model.			super.dispose();		}	}}